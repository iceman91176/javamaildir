<project name="javamaildir" default="dist" basedir=".">
    <description>
        JavaMaildir
    </description>

    <!-- set global properties for this build -->
    <property name="src.dir" location="src"/>
    <property name="src.test" location="tests"/>
    <property name="build.dir" location="build"/>
    <property name="build.classes" location="${build.dir}/classes"/>
    <property name="build.test" location="${build.dir}/test"/>
    <property name="build.reports" location="${build.dir}/reports"/>
    <property name="dist" location="dist"/>
    <property name="tools.dir" location="tools"/>
    <property name="junit.jar" value="lib/junit.jar"/>
    <property name="log4j.jar" value="lib/log4j-1.2.8.jar"/>
    <!-- property name="app.version" value="0.4pre9"/ -->
    <!-- property name="app.version" value="devel"/ -->
    <property name="app.version" value="devel"/>

    <path id="compile.classpath">
        <fileset dir="lib">
            <include name="*.jar"/>
        </fileset>
    </path>
    <path id="test.classpath">
        <pathelement location="lib/mail.jar"/>
        <pathelement location="lib/activation.jar"/>
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${build.test}"/>
        <pathelement location="${build.classes}"/>
        <pathelement location="${junit.jar}"/>
    </path>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        <condition property="version" value="${DSTAMP}">
            <equals arg1="${app.version}" arg2="devel"/>
        </condition>
        <condition property="version" value="${app.version}">
            <equals arg1="${version}" arg2="${version}"/>
        </condition>

        <condition property="debug" value="log.debug">
            <equals arg1="${app.version}" arg2="devel"/>
        </condition>
        <condition property="log4j" value="import org.apache.log4j">
            <equals arg1="${app.version}" arg2="devel"/>
        </condition>
        <condition property="error" value="log.error">
            <equals arg1="${app.version}" arg2="devel"/>
        </condition>
        <condition property="logger" value="private static Logger log">
            <equals arg1="${app.version}" arg2="devel"/>
        </condition>

        <condition property="debug" value="// log.debug">
            <equals arg1="${version}" arg2="${app.version}"/>
        </condition>
        <condition property="log4j" value="// import org.apache.log4j">
            <equals arg1="${version}" arg2="${app.version}"/>
        </condition>

        <condition property="error" value="System.err.println">
            <equals arg1="${version}" arg2="${app.version}"/>
        </condition>
        <condition property="logger" value="// private static Logger log">
            <equals arg1="${version}" arg2="${app.version}"/>
        </condition>

        <echo message="${ant.project.name} ${version}"/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dir}/doc"/>
        <mkdir dir="${build.dir}/doc/api"/>

        <copy todir="tmp/src">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>
        </copy>
        <replace dir="tmp/src"
            summary="true">
            <replacefilter token="log.debug" value="${debug}"/>
            <replacefilter token="log.error" value="${error}"/>
            <replacefilter token="import org.apache.log4j" value="${log4j}"/>
            <replacefilter token="private static Logger log" value="${logger}"/>
        </replace>
    </target>

    <target name="compile" depends="init"
        description="compile the source ">
        <!-- Compile the java code from ${src} into ${build} -->
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes}"/>

        <javac srcdir="tmp/src"
            destdir="${build.classes}"
            debug="on"
            deprecation="true">
            <classpath refid="compile.classpath"/>
        </javac>
        <mkdir dir="${build.dir}/META-INF"/>

        <mkdir dir="${build.test}"/>
        <echo message="${junit.jar}"/>
        <javac srcdir="${src.test}"
            destdir="${build.test}"
            debug="on"
            deprecation="true"
            includes="**/*.java">
            <classpath refid="test.classpath"/>
        </javac>
        <copy todir="${build.test}">
            <fileset dir="${src.test}">
                <exclude name="**/*.java"/>
                <exclude name="CVS"/>
            </fileset>
        </copy>


        <mkdir dir="${build.classes}/META-INF"/>
        <copy todir="${build.classes}/META-INF">
            <fileset dir="${src.dir}/META-INF"/>
        </copy>

    </target>

    <target name="test" depends="compile">
        <mkdir dir="${build.reports}"/>

        <echo message="Performing Unit Tests"/>
        <junit fork="true" printsummary="yes" dir="${build.reports}"
            haltonerror="true"
            haltonfailure="true">
            <formatter type="plain"/>
            <classpath refid="test.classpath"/>
            <batchtest todir="${build.reports}">
                <fileset dir="${build.test}" includes="**/*TestCase.class"/>
            </batchtest>
        </junit>
    </target>

    <target name="dist-test" depends="compile">
        <copy todir="${dist}/test">
            <fileset dir="${build.classes}"/>
            <fileset dir="lib"/>
        </copy>
    </target>

    <target name="dist" depends="init, compile, test"
        description="generate the distribution">
        <!-- Create the distribution directory -->
        <mkdir dir="${dist}"/>

        <jar jarfile="${dist}/${ant.project.name}-${version}.jar"
            basedir="${build.classes}"
            manifest="${build.classes}/META-INF/MANIFEST.MF">
        </jar>
    </target>

    <target name="docs" depends="compile">
        <javadoc destdir="build/doc/api"
            windowtitle="JavaMaildir API">
            <package name="net.ukrpost.storage.maildir"/>
            <sourcepath location="${src.dir}"/>
            <classpath refid="test.classpath"/>
            <bottom>
                <![CDATA[<em>Copyright (c) 2002-2003, Alexander Zhukov</em>]]>
            </bottom>
        </javadoc>
    </target>

    <target name="release" depends="dist, docs">
        <property name="dist.dir.release" value="${dist}/${ant.project.name}-${version}"/>
        <mkdir dir="${dist.dir.release}"/>
        <copy todir="${dist.dir.release}">
            <fileset dir="${build.dir}" includes="doc/**"/>
        </copy>
 
        <!-- dumps doc/site.html to README -->
        <exec executable="links"
            dir="."
            output="${dist.dir.release}/README" os="Linux">
            <arg line="-dump doc/site.html"/>
        </exec>

        <copy tofile="${dist.dir.release}/README.html"
            file="doc/site.html"/>

        <copy todir="${dist.dir.release}" file="AUTHORS"/>
        <copy todir="${dist.dir.release}" file="COPYING"/>

        <copy todir="${dist.dir.release}/examples">
            <fileset dir="examples" includes="**/*.java" excludes="CVS/*"/>
        </copy>

        <copy todir="${dist.dir.release}"
            file="${dist}/${ant.project.name}-${version}.jar"/>

        <tar tarfile="${dist}/${ant.project.name}-${version}-lite.tar"
            basedir="${dist.dir.release}"/>
        <gzip src="${dist}/${ant.project.name}-${version}-lite.tar"
            zipfile="${dist}/${ant.project.name}-${version}-lite.tar.gz"/>
        <delete file="${dist}/${ant.project.name}-${version}-lite.tar"/>

        <mkdir dir="${dist.dir.release}/lib"/>
        <copy todir="${dist.dir.release}/lib">
            <fileset dir="lib">
                <exclude name="CVS/*"/>
                <exclude name="mail.jar"/>
                <exclude name="activation.jar"/>
            </fileset>
        </copy>

        <tar tarfile="${dist}/${ant.project.name}-${version}.tar"
            basedir="${dist.dir.release}"/>
        <gzip src="${dist}/${ant.project.name}-${version}.tar"
            zipfile="${dist}/${ant.project.name}-${version}.tar.gz"/>
        <delete file="${dist}/${ant.project.name}-${version}.tar"/>

    </target>

    <target name="clean"
        description="clean up">
        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build.dir}"/>
        <delete dir="${dist}"/>
        <delete dir="tmp/src"/>
    </target>
</project>
